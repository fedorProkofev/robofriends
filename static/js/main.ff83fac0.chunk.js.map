{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","alt","src","CardList","users","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","error","info","setState","Component","App","searchField","onSearchChange","isPending","filteredUsers","filter","toLowerCase","includes","onRequestUsers","connect","searchUsers","requestUsers","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initalStateSearch","initalStateUsers","logger","createLogger","rootReducer","combineReducers","action","Object","assign","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff83fac0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search User'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => (\r\n\t<div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n\t\t<img alt={name} src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t</div>\r\n)\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ users }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tusers.map((user, i) => {\r\n\t\t\t\t\treturn <Card\r\n\t\t\t\t\t\tkey={users[i].id}\r\n\t\t\t\t\t\tid={users[i].id}\r\n\t\t\t\t\t\tname={users[i].name}\r\n\t\t\t\t\t\temail={users[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state ={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops! That's not good.</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError : true})\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestUsers } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchUsers.searchField,\r\n\t\tusers: state.requestUsers.users,\r\n\t\tisPending: state.requestUsers.isPending,\r\n\t\terror: state.requestUsers.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestUsers: () => dispatch(requestUsers())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, users, isPending } = this.props;\r\n\t\tconst filteredUsers = users.filter( user => {\r\n\t\t\treturn user.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t<><h1 className='tc'>Loading</h1></> :\r\n\t\t(\r\n\t\t\t<>\r\n\t\t\t\t<header className='tc'>\r\n\t\t\t\t\t<><header><h1 className=\"f2\">RoboFriends</h1></header></>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t</header>\r\n\t\t\t\t<main className='tc'>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t\t<CardList users={filteredUsers} />\r\n\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</main>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestUsers();\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_USERS_PENDING,\r\n\tREQUEST_USERS_SUCCESS,\r\n\tREQUEST_USERS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestUsers = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_USERS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => dispatch({ type: REQUEST_USERS_SUCCESS, payload: data }))\r\n\t\t\t.catch(error => dispatch({ type: REQUEST_USERS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_USERS_PENDING = 'REQUEST_USERS_PENDING';\r\nexport const REQUEST_USERS_SUCCESS = 'REQUEST_USERS_SUCCESS';\r\nexport const REQUEST_USERS_FAILED = 'REQUEST_USERS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_USERS_PENDING,\r\n\tREQUEST_USERS_SUCCESS,\r\n\tREQUEST_USERS_FAILED\r\n} from './constants';\r\n\r\nconst initalStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchUsers = (state = initalStateSearch, action = {}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initalStateUsers = {\r\n\tisPending: false,\r\n\tusers: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestUsers = (state = initalStateUsers, action = {}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_USERS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_USERS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { users: action.payload, isPending: false })\r\n\t\tcase REQUEST_USERS_FAILED:\r\n\t\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchUsers, requestUsers } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchUsers, requestUsers });\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n\trootReducer,\n\tcomposeEnhancers(\n\t\tapplyMiddleware(thunkMiddleware, logger)\n\t)\n)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}